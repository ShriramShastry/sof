
#
# Common pipeline volume
#
# A generic volume component. All attributes defined herein are namespaced
# by alsatplg to "volume.attribute_name"
#
# Usage: this component can be used by declaring in the "widgets" field of
# a parent object. i.e.
#
# widgets [
# 	"volume.M.N" {
#		min_gain_db		"-90"
#		max_gain_db		"0"
#		mute			"true"
		gain_steps		"30"
#	}
# ]
#
# Where M is pipeline ID and N is a unique integer in the parent object.

ClassComponent."volume" {

	############### Boiler Plate Start ####################

	#
	# Argument used to construct pipeline ID (widget index)
	#

	@args [ INDEX ]

	@args.INDEX {
		type integer
		default {
			name buffer.index
		}
	}

	#
	# Common Attribute Definitions for Widgets
	#

	# Pipeline ID
	DefineAttribute."index" {
		type	"word"
		# attribute maps to C struct ABI
	}

	# NO PM flag - not used on DSP
	DefineAttribute."no_pm" {
		type	"bool"
		# attribute maps to C struct ABI
	}

	# Widget Type - Enum in C struct
	DefineAttribute."type" {
		type	"string"
		# attribute maps to C struct ABI
	}

	# Widget UUID
	DefineAttribute."uuid" {
		type	"uuid"

		# attribute maps to the following token
		tuple	"SOF_TKN_COMP_UUID"
	}

	############## Boiler Plate End ####################

	#
	# Bespoke Attribute Definitions for Buffers (WIP)
	#

	# Buffer capabilities
	DefineAttribute."min_gain_db" {
		type	"word"

		# attribute maps to the following token
		tuple	"SOF_TKN_VOL_MINDB"
	}

	# etc ........


	#
	# Attribute constraints
	#

	# Mandatory attributes that all buffers must set
	attributes."mandatory" [
		"index"
		"type"
		"min_gain_db"
		# etc.....
		"uuid"
	]

	# optional attributes that some buffers may set
	attributes."optional" [
		"mute"
	]

	# Immutable attributes that cannnot be changed by parents
	attributes."immutable" [
		"type"
		"uuid"
	]


	#
	# Default attribute values - unless overridden if permitted
	#

	index $INDEX
	type "pga"
	no_pm "true"
	uuid	"0x6762792692ff33"

	#
	# kcontrol
	#

	# mixer control for channels 0,1
	control."volume.0" {

		# channel 0 is "front left", 1 is "front right"
		channels."2" {
			"FL"
			"FR"
		}

		# control uses bespoke driver get/put/info ID
		ops."ctl" {
			info "volsw"
			#256 binds the mixer control to volume get/put handlers
			get "256"
			put "256"
		}

	}
}
